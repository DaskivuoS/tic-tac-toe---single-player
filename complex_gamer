this contains the list of functions established and their details

-----------------------------------------------------------------------
>>find_neighbour(x,y)
this takes in the co-ordinats of a cell
this determines the neighbours of the cell
this RETURNS THE NEIGHBOURS IN FORM OF AN ARRAY
-----------------------------------------------------------------------
>>free_check(x,y)
this takes in the co-ordinates of a cell
this determines the status of the cell
as to who owns it or is it free
this RETURNS THE OWNERSHIP OF THE CELL in the form of
free , Player1 , Player2
-----------------------------------------------------------------------
>>pattern_finder(x,y)
this takes in two co-ordinates in form of values
this looks for a probable winning pattern along given cells
if there is a pattern, it identifies the completing cell
this RETURNS THE COMPLETING CELL IN FORM OF A VALUE
IF THERE IS NO POSSIBILITY, IT RETURNS none
-----------------------------------------------------------------------
>>foresight_2(x)
this takes in a single co-ordinate in the form of value
this looks if there is any possible pattern using this cell
this judges the completion by scanning the neighbours 
this can not fill in the blank to complete a pattern
this RETURNS AN ARRAY CONTAINING THE POSSIBILITIES 
THAT CAN COMPLETE A PATTERN
-----------------------------------------------------------------------
>>foresight_1(input)
this takes in either "dummy" or "topper"
this scans the whole set and marks various cells
the cells are marked based on their usefulness
the higher a mark, the better the bet over there
any cell marked zero or negative can not be played upon
WHEN THE INPUT IS 'DUMMY', IT RETURNS THE DUMMY TABLE
WHEN THE INPUT IS 'TOPPER', IT RETURNS THE TOP SCORERS
the dummy table holds the scores of all the blocks in the set
-----------------------------------------------------------------------
>>fillup()
this takes no input
the main objective is to fill up a blank
the action causes the completion of a pattern
this returns the POSSIBILITIES where a position can be filled up
the return is in the form of an array
-----------------------------------------------------------------------
>>block_opponent()
this takes in no input
the main objective of this function is to block the opponent
the opponent is blocked from apparent win
this returns WHETHER OR NOT AN ACTION HAS BEEN TAKEN
THE RESULT IS IN THE FORM OF 0 OR 1
IF THE RESULT IS 0 , IT MEANS NO ACTION HAS BEEN TAKEN
IF THE RESULT IS 1 , IT MEANS SOME ACTION HAS BEEN TAKEN
-----------------------------------------------------------------------
>>button_press(x)
this takes in a single value as input
it then figures out which cell the value corresponds to
it GETS THE BUTTON LOCATED AT THE SPECIFIED POINT CLICKED
-----------------------------------------------------------------------
>>assignment(x)
this takes in a single value as input
the input defines which player is the computer assigned to
an input of 1      would mean it is assigned Player1
an input of 2      would mean it is assigned Player2
an input of "none" would mean it is not assigned yet
not being assigned means the user has not opted for the service
it returns no value
----------------------------------------------------------------------
>>complex_gamer(x)
this takes in a value as input 
this input is fed to the function assignment(x)
this input selects which side the computer is playing for
or if the computer is playing at all
this function co-ordinates the calling of all the other functions
this brings about the truly intelligent gaming system
this function returns no value
----------------------------------------------------------------------